<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="geo-info-sapi-suite.xml" />
	<munit:test name="get:\geoLocInfoByIp:geo-info-sapi-config-test" doc:id="8f15919e-3ba9-492c-8f04-be3c0aedcf07" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="30fcc78a-3e57-4a53-8446-9b12291b8e1d" >
				<munit:payload value="#[readUrl('classpath://getgeoLocInfoByIpgeoinfosapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getgeoLocInfoByIpgeoinfosapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getgeoLocInfoByIpgeoinfosapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock Geo Loc Info With IP Address" doc:id="ef09b891-998b-4cf0-ac41-895fc92d13db" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="IP Stack Request" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="18165cef-97b2-4bb9-bf4a-b7cd04efacc7" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="HTTP_IPStack_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue='#["/" ++ (attributes.queryParams.ipAddress default "0.0.0.0")]' attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('getgeoLocInfoByIpgeoinfosapiconfigtest/geo-loc-info-by-ip-response.json')] " mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\geoLocInfoByIp:geo-info-sapi-config" doc:id="5e807dff-b8ae-4df9-90fb-de571b046d9f" name="get:\geoLocInfoByIp:geo-info-sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="24cdc0ef-608d-44c8-991d-87ca1db66021" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getgeoLocInfoByIpgeoinfosapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\geoLocInfoByZip:geo-info-sapi-config-test" doc:id="ae116f64-37e1-4ddf-9be6-b72868c880fd" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="02ccd3c5-e6d4-4e13-a64e-881ded671c60" >
				<munit:payload value="#[readUrl('classpath://getgeoLocInfoByZipgeoinfosapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getgeoLocInfoByZipgeoinfosapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getgeoLocInfoByZipgeoinfosapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock Geo Loc Info With Address" doc:id="ff057b26-a940-40f5-9fb8-fd52e863751b" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="US Geo Code" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="5373f418-7ce9-40eb-91a0-636b4a088dd1" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="#[Mule::p('secure::usgeocoder.path')]" attributeName="path" />
					<munit-tools:with-attribute whereValue="HTTP_US_Geo_Coder_Request_configuration" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('getgeoLocInfoByZipgeoinfosapiconfigtest/geo-loc-info-by-address-response.json')] " mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\geoLocInfoByZip:geo-info-sapi-config" doc:id="89d1cfaa-7283-4ae6-8d7b-d3a6d5b86bb6" name="get:\geoLocInfoByZip:geo-info-sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="cbee727d-5c47-4f79-95ab-df44668a4585" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getgeoLocInfoByZipgeoinfosapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
